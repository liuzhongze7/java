package lanqiao;

public class Main {

    public static void main(String[] args) {
        long start = System.currentTimeMillis(); //记录开始时间

        int count = 0; //初始化满足条件的数的个数为0
        
        for (int i = 2; i <= 9; i++) { //数字的第一位在区间 [2, 3] 之间
            dfs(i, 1, count);
        }
        for (int i = 2; i <= 9; i++) { //数字的第一位在区间 [2, 9] 之间
            dfs(i, 2, count);
        }

        long end = System.currentTimeMillis(); //计算循环结束时间

        System.out.println(count); //输出满足条件的数的个数
        System.out.println("共用时" + (end - start) / 1000 % 60 + "秒");//输出程序运行总时间，单位为秒
    }

    /**
     * 判断一个数字是否是回文数
     */
    private static boolean isPalindrome(int[] nums, int len) {
        for (int i = 0; i <= len / 2; i++)
            if (nums[i] != nums[len - i - 1])
                return false;
        return true;
    }

    /**
     * 判断一个数字是否单调不减
     */
    private static boolean isNonDecreasing(int[] nums, int len) {
        for (int i = 0; i < len; i++)
            if (nums[i] > nums[i + 1])
                return false;
        return true;
    }

    /**
     * 数字拆分为数组
     */
    private static int[] split(int num, int len) {
        int[] nums = new int[len];
        int p = len - 1;
        while (num != 0) {
            nums[p] = num % 10;
            num /= 10;
            p--;
        }
        return nums;
    }

    /**
     * 回溯枚举每个数字
     */
    private static void dfs(int num, int len, int count) {
        if (len > 11) return; // 数字超出位数限制，退出递归
        int[] nums = split(num, len); //将数字拆分为数组
        if (isPalindrome(nums, len) && isNonDecreasing(nums, len)) //如果该数是回文数并且每一位数字都不递减，说明该数满足条件，将计数器+1
            count++;
        for (int i = 0; i <= 9; i++) {
            int next = num * 10 + i;
            dfs(next, len + 1, count); //枚举下一个数字
        }
    }
}
